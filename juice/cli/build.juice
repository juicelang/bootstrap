import .std.log
import .std.log.pretty (pretty)
import .std.io
import .std.path
import .std.types (type, result, option)
import .std.data.map (map)
import .compiler (compiler)

fn help() {
	io.stdout.write_line("
	| Juice CLI - Version 0.0.0
	|
	| Usage:
	|   juice build [options]
	|
	| Options:
	|   --project          The project to build
	|   --source           The source directory
	|
	|   --lex              Only run the lexer
	|   --parse            Only run the parser
	")
}

export fn run() -> future(result) {
	args := io.parse_process_arguments([
		io.argument.boolean("help", "h"),
		io.argument.boolean("version", "v"),
		io.argument.string("project", "p"),
		io.argument.string("source", "s"),
		io.argument.boolean("lex", "L"),
		io.argument.boolean("parse", "P"),
	])?

	log.debug("${pretty(args)}")

	if args.has("help") {
		help()
		return result.ok()
	}

	relative_project_path := args.get("project", ".")

	project_path := path.resolve_relative(relative_project_path)

	source_dir := if args.has("source") {
		path.resolve([project_path, args.get("source")])
	} else {
		path.resolve([project_path, "src"])
	}


	c := compiler.new()

	compilation_queue := [path.resolve([source_dir, "main.juice"])]
	compiled_files := map.new()

	for {
		if compilation_queue.length == 0 {
			break
		}

		file := compilation_queue.pop()

		if compiled_files.has(file) {
			continue
		}

		compile_result := c.compile(file).await?

		compiled_files.set(file, compile_result)
	}

	result.ok(option.none)
}

