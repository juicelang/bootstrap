foreign import .std.io as foreign_io
import .std.data.map (map)
import .std.types (type, result)

export 'stdout := {}

impl stdout {
	static fn write(message) {
		foreign_io.stdout.write(message)
	}

	static fn write_line(message) {
		stdout.write("${message}\n")
	}
}

export fn debug(message) {
		foreign_io.debug(message)
}

export 'argument := {
	string(full: string, short: string)
	boolean(full: string, short: string)
	count(full: string, short: string)
}

export fn parse_process_arguments(arg_types, permissive) {
	arg_types_map := map.new()
	args := map.new()

	args.set("_", [])

	for arg_type of arg_types {
		arg_types_map.set(arg_type.full, arg_type)
		arg_types_map.set(arg_type.short, arg_type)
	}

	process_arguments := foreign_io.get_process_arguments()
	
	for i of 0..process_arguments.length {
		arg := process_arguments.at(i)

		if !arg.starts_with("-") {
			positional_args := args.get("_")
			positional_args.push(arg)
			continue
		}

		is_long := arg.starts_with("--")
		is_short := arg.starts_with("-") && !is_long

		if is_long {
			arg = arg.slice(2)
		} else if is_short {
			arg = arg.slice(1)
		}
		
		arg_parts := arg.split("=")
		arg_name := arg_parts.at(0)

		if !arg_types_map.has(arg_name) {
			if permissive {
				continue
			}
			return result.error("Unknown argument ${arg_name}")
		}

		arg_type := arg_types_map.get(arg_name)

		if type.is(arg_type, argument.boolean) {
			args.set(arg_type.full, true)
			continue
		}

		arg_value := if arg_parts.length > 1 {
			arg_parts.at(1)
		}  else {
			next_arg := process_arguments.at(i + 1)

			if i + 1 >= process_arguments.length || next_arg.starts_with("-") {
				""
			} else {
				i = i + 1
				next_arg
			}
		}

		if !arg_value {
			return result.error("Expected a value for argument ${arg_type.full}")
		}

		if arg_types_map.has(arg) {
			arg_type := arg_types_map.get(arg)
			if type.is(arg_type, argument.string) {
				if !arg_value {
					return result.error("Expected a value for string argument ${arg_type.full}")
				}
				args.set(arg, arg_value)
			} else if type.is(arg_type, argument.count) {
				current := if args.has(arg) {
					args.get(arg)
				} else {
					0
				}
				args.set(arg, current + 1)
			}
		}
	}

	result.ok(args)
}

export fn read_file(path) {
	foreign_io.read_file(path)
}
